package com.example.schooldatabase;

import android.content.Context;
import android.content.Intent;
import android.support.constraint.ConstraintLayout;
import android.support.constraint.ConstraintSet;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class ViewSectionsActivity extends AppCompatActivity {
    private SessionManager session;
    private RequestQueue queue;
    private String url;
    private int RegType = 0;
    private int regClass = 0;
    private int regSec = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_view_sections);
        session = new SessionManager(getApplicationContext());
        queue = Volley.newRequestQueue(this);

        User user = session.getUserDetails();

        if(!session.isLoggedIn() && !user.isMentor()) {
            Context context = getApplicationContext();
            CharSequence message = "You do not have permission to access this page";
            int duration = Toast.LENGTH_SHORT;
            Toast toast = Toast.makeText(context, message, duration);
            toast.show();

            Intent intent = new Intent(this, MainActivity.class);
            startActivity(intent);
            finish();
        }
        if(getIntent() != null && getIntent().getExtras() != null) {
            url = MainActivity.HREF + getIntent().getStringExtra("url");
            RegType = getIntent().getIntExtra("type",0);
            if (RegType != 0) {
                regClass = getIntent().getIntExtra("class",0);
                regSec = getIntent().getIntExtra("sec",0);
            }
        }
        System.out.println(url);
        getSections();
    }

    public void getSections() {
        User user = session.getUserDetails();
        JSONArray requestContent = new JSONArray();
        try {
            requestContent.put(0,  Integer.parseInt(user.getID()));
            requestContent.put(1,regClass);

            requestContent.put(2,regSec);
            requestContent.put(3,RegType);
            System.out.print(requestContent);
        } catch (JSONException e) {
            Log.d("JsonException", e.toString());
        }

        JsonArrayRequest getRequest = new JsonArrayRequest(Request.Method.POST, url, requestContent,
                new Response.Listener<JSONArray>()
                {
                    @Override
                    public void onResponse(JSONArray response) {
                        // response
                        Log.d("Response", response.toString());

                        try {
                            buildSectionListing(response);
                        } catch (Exception e) {
                            Log.d("JsonException", e.toString());
                        }
                    }
                },
                new Response.ErrorListener()
                {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        // error
                        Log.d("Error.Response", error.toString());
                        Context context = getApplicationContext();
                        CharSequence text = "Error response!" + error.toString();
                        int duration = Toast.LENGTH_LONG;

                        Toast toast = Toast.makeText(context, text, duration);
                        toast.show();
                    }
                }
        );
        queue.add(getRequest);
    }
    public void Register(View view){
        Intent intent = new Intent(this, ViewSectionsActivity.class);
        intent.putExtra("url","/code/project/api/all_classes.php");
        intent.putExtra("type", RegType);
        intent.putExtra("class", regClass);
        intent.putExtra("sec", regSec);
        startActivity(intent);
    }

    // Constant values for IDs of objects generated by buildSectionListing
    public class IdValues {
        private static final int TITLE = 100;
        private static final int CONSTRAINT_LAYOUT = 300;
        private static final int MENTEE_HEADER = 400;
        //private static final int MENTOR_HEADER = 500;
        private static final int MENTEE_NAME = 1000;
        private static final int MENTEE_GRADE = 2000;
        private static final int START_DATE = 3000;
        private static final int END_DATE = 4000;
        private static final int TIMESLOT = 5000;
        private static final int MENTOR_REQ = 6000;
        private static final int MENTEE_REQ = 7000;
        private static final int DESC = 8000;
        private static final int SUBCONSTRAINT_LAYOUT = 10000;
        private static final int MENTEE_BUTTON = 11000;
        private static final int MENTOR_BUTTON = 12000;
        private static final int MOD_BUTTON =13000;
        private static final int CUR_MODERATOR=14000;
    };

    public void buildSectionListing(JSONArray courseList) throws JSONException {
        User user = session.getUserDetails();
        ConstraintLayout layout = findViewById(R.id.section_layout);
        ConstraintSet set = new ConstraintSet();
        if(!courseList.isNull(0)) {
            //hide default text
            TextView textView = (TextView) findViewById(R.id.No_Avail_Sec);
            textView.setVisibility(View.GONE);
        }
        for (int i = 0; !courseList.isNull(i); i++) {
            JSONObject course = courseList.getJSONObject(i);
            System.out.println(course);

            // STRUCTURE:
            // - TITLE (clickable, reveals ConstraintLayout)
            // - CONSTRAINTLAYOUT (holds student info)
            // --- MENTEES (header for mentees)
            // --- (generated mentees)
            // --- MENTORS (header for mentors)
            // --- (generated mentors)

            //generate title
            TextView title = new TextView(getApplicationContext());
            title.setText(course.getString("courseName"));
            title.setTextSize(24);
            title.setClickable(true);
            title.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    toggleSectionInfo(v);
                }
            });
            title.setCompoundDrawablesWithIntrinsicBounds(android.R.drawable.arrow_down_float, 0, 0, 0);
            title.setId(IdValues.TITLE + i);

            //generate info container
            ConstraintLayout courseInfo = new ConstraintLayout(getApplicationContext());
            courseInfo.setVisibility(View.GONE);
            courseInfo.setId(IdValues.CONSTRAINT_LAYOUT + i);
            courseInfo.setMinWidth(1000);
            courseInfo.setMinHeight(250);
            courseInfo.setBackgroundResource(android.R.drawable.editbox_background);

            layout.addView(title, 0);
            layout.addView(courseInfo);
            set.clone(layout);

            //position title for course

            if(i == 0) {
                //first element, constrain to top
                set.connect(title.getId(), ConstraintSet.TOP, layout.getId(), ConstraintSet.TOP, 8);
                set.connect(title.getId(), ConstraintSet.LEFT, layout.getId(), ConstraintSet.LEFT, 8);
                set.connect(title.getId(), ConstraintSet.RIGHT, layout.getId(), ConstraintSet.RIGHT, 8);

            } else {
                //not first element, constrain to previous
                ConstraintLayout prev_view = findViewById(IdValues.CONSTRAINT_LAYOUT + i - 1);
                set.connect(title.getId(), ConstraintSet.TOP, prev_view.getId(), ConstraintSet.BOTTOM, 60);
                set.connect(title.getId(), ConstraintSet.LEFT, layout.getId(), ConstraintSet.LEFT, 8);
                set.connect(title.getId(), ConstraintSet.RIGHT, layout.getId(), ConstraintSet.RIGHT, 8);
            }

            //position courseInfo constraintLayout
            set.connect(courseInfo.getId(), ConstraintSet.TOP, title.getId(), ConstraintSet.BOTTOM, 0);
            set.connect(courseInfo.getId(), ConstraintSet.LEFT, layout.getId(), ConstraintSet.LEFT, 8);
            set.connect(courseInfo.getId(), ConstraintSet.RIGHT, layout.getId(), ConstraintSet.RIGHT, 8);

            set.applyTo(layout);

            // work on courseInfo
            ConstraintSet sectionSet = new ConstraintSet();
            ConstraintSet subSectionSet = new ConstraintSet();

            // Create mentee header
            //refactor to course header
            TextView SectionHeader = new TextView(getApplicationContext());
            SectionHeader.setText("Sections");
            SectionHeader.setTextSize(22);
            SectionHeader.setLayoutParams(
                    new ConstraintLayout.LayoutParams(
                            ViewGroup.LayoutParams.MATCH_PARENT,
                            ViewGroup.LayoutParams.WRAP_CONTENT));
            SectionHeader.setBackgroundResource(R.drawable.drawable_bottom_border);
            SectionHeader.setId(IdValues.MENTEE_HEADER + i);

            courseInfo.addView(SectionHeader);
            sectionSet.clone(courseInfo);

            // position mentee header at top of info container
            sectionSet.connect(SectionHeader.getId(), ConstraintSet.TOP, courseInfo.getId(), ConstraintSet.TOP);
            sectionSet.connect(SectionHeader.getId(), ConstraintSet.LEFT, courseInfo.getId(), ConstraintSet.LEFT);
            sectionSet.connect(SectionHeader.getId(), ConstraintSet.RIGHT, courseInfo.getId(), ConstraintSet.RIGHT);

            sectionSet.applyTo(courseInfo);

            // create mentee elements
            JSONArray SectionList = course.getJSONArray("sections");

            int section_index = 0;
            while(!SectionList.isNull(section_index)) {
                // For each section: produce a sectionName and SectionID element
                final JSONObject section = SectionList.getJSONObject(section_index);
                System.out.println(section);

                TextView sectionName = new TextView(getApplicationContext());
                sectionName.setText(section.getString("sectionName"));
                sectionName.setId(IdValues.MENTEE_NAME + 10*i + section_index);
                sectionName.setTextSize(17);
                sectionName.setClickable(true);
                sectionName.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        toggleSubSectionInfo(v);
                    }
                });
                sectionName.setCompoundDrawablesWithIntrinsicBounds(android.R.drawable.arrow_down_float, 0, 0, 0);

                TextView SectionID = new TextView(getApplicationContext());
                SectionID.setText(course.getString("courseID")+"."+section.getString("sectionID"));
                SectionID.setId(IdValues.MENTEE_GRADE + 10*i + section_index);
                SectionID.setTextSize(17);

                ConstraintLayout sectionInfo = new ConstraintLayout(getApplicationContext());
                sectionInfo.setVisibility(View.GONE);
                sectionInfo.setId(IdValues.SUBCONSTRAINT_LAYOUT + 10*i +section_index);
                sectionInfo.setMinWidth(1000);
                sectionInfo.setMinHeight(250);
                sectionInfo.setBackgroundResource(android.R.drawable.editbox_background);

                courseInfo.addView(sectionName);
                courseInfo.addView(SectionID);
                courseInfo.addView(sectionInfo);
                sectionSet.clone(courseInfo);

                //chain sectionName, SectionID together
                sectionSet.createHorizontalChain(courseInfo.getId(), ConstraintSet.LEFT,
                        courseInfo.getId(), ConstraintSet.RIGHT,
                        new int[] {sectionName.getId(), SectionID.getId()}, null, ConstraintSet.CHAIN_SPREAD);
                sectionSet.connect(SectionID.getId(), ConstraintSet.BASELINE, sectionName.getId(), ConstraintSet.BASELINE);

                if(section_index == 0) {
                    //attach to header
                    sectionSet.connect(sectionName.getId(), ConstraintSet.TOP, SectionHeader.getId(), ConstraintSet.BOTTOM, 16);
                    sectionSet.connect(sectionInfo.getId(),ConstraintSet.TOP, sectionName.getId(), ConstraintSet.BOTTOM,4);
                } else {
                    //attach to previous section element
                    sectionSet.connect(sectionName.getId(), ConstraintSet.TOP, (int) sectionInfo.getId() - 1 , ConstraintSet.BOTTOM, 4);
                    sectionSet.connect(sectionInfo.getId(),ConstraintSet.TOP, sectionName.getId(), ConstraintSet.BOTTOM,4);
                }



                sectionSet.applyTo(courseInfo);

                TextView startDate = new TextView(getApplicationContext());
                startDate.setText("start date: "+section.getString("startDate"));
                startDate.setId(IdValues.START_DATE+10*i+section_index);

                TextView endDate = new TextView(getApplicationContext());
                endDate.setText("end date: "+section.getString("endDate"));
                endDate.setId(IdValues.END_DATE +10*i+section_index);

                TextView timeSlot = new TextView(getApplicationContext());
                timeSlot.setText("time: "+section.getString("timeslot"));
                timeSlot.setId(IdValues.TIMESLOT +10*i+section_index);

                TextView mentorReq = new TextView(getApplicationContext());
                String level;
                switch(section.getString("mentorReq")) {
                    case "1":
                        level = "Freshman";
                        break;
                    case "2":
                        level = "Sophomore";
                        break;
                    case "3":
                        level = "Junior";
                        break;
                    case "4":
                        level = "Senior";
                        break;
                    default:
                        level = "unknown";
                }
                mentorReq.setText("Mentor Requirement: "+level);
                mentorReq.setId(IdValues.MENTOR_REQ+10*i+section_index);

                TextView menteeReq = new TextView(getApplicationContext());
                switch(section.getString("menteeReq")) {
                    case "1":
                        level = "Freshman";
                        break;
                    case "2":
                        level = "Sophomore";
                        break;
                    case "3":
                        level = "Junior";
                        break;
                    case "4":
                        level = "Senior";
                        break;
                    default:
                        level = "unknown";
                }
                menteeReq.setText("Mentee Requirement:"+level);
                menteeReq.setId(IdValues.MENTEE_REQ+10*i+section_index);

                TextView description = new TextView(getApplicationContext());
                description.setText(section.getString("descrption"));
                description.setId(IdValues.DESC+10*i+section_index);
                description.setGravity(Gravity.CENTER);

                Button Mentor_Enrole = new Button(getApplicationContext());
                Mentor_Enrole.setText("Mentor");
                Mentor_Enrole.setId(IdValues.MENTOR_BUTTON+10*i+section_index);
                if(!section.getBoolean("avail_or")){
                    Mentor_Enrole.setVisibility(View.GONE);
                }
                Mentor_Enrole.setClickable(true);
                final int courseIDOR = Integer.parseInt(course.getString("courseID"));
                final int secIDOR= Integer.parseInt(section.getString("sectionID"));
                Mentor_Enrole.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        RegType = 1;
                        regClass= courseIDOR;
                        regSec=secIDOR;
                        Register(view);
                    }
                });
                Button Mentee_Enrole = new Button(getApplicationContext());
                Mentee_Enrole.setText("Mentee");
                Mentee_Enrole.setId(IdValues.MENTEE_BUTTON+10*i+section_index);
                if(!section.getBoolean("avail_ee")){
                    Mentee_Enrole.setVisibility(View.GONE);
                }
                Mentee_Enrole.setClickable(true);
                final int courseIDEE = Integer.parseInt(course.getString("courseID"));
                final int secIDEE= Integer.parseInt(section.getString("sectionID"));
                Mentee_Enrole.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        RegType = 2;
                        regClass= courseIDEE;
                        regSec=secIDEE;
                        Register(view);
                    }
                });

                TextView CurrentModerator = new TextView(getApplicationContext());
                if(!user.isModerator()){CurrentModerator.setVisibility(View.GONE);}
                if(section.getBoolean("avail_mod")){
                    CurrentModerator.setText("Current Moderator: ");
                }
                else{
                    CurrentModerator.setText("Current Moderator: "+section.getString("Moderator"));
                }
                CurrentModerator.setId(IdValues.CUR_MODERATOR+10*i+section_index);

                Button moderatorEnrole = new Button(getApplicationContext());
                if(!user.isModerator()||!section.getBoolean("avail_mod")){moderatorEnrole.setVisibility(View.GONE);}
                moderatorEnrole.setText("Sign Up");
                moderatorEnrole.setClickable(true);
                moderatorEnrole.setId(IdValues.MOD_BUTTON+10*i+section_index);
                final int courseIDOD = Integer.parseInt(course.getString("courseID"));
                final int secIDOD= Integer.parseInt(section.getString("sectionID"));
                moderatorEnrole.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        RegType = 3;
                        regClass= courseIDOD;
                        regSec=secIDOD;
                        Register(view);
                    }
                });



                sectionInfo.addView(startDate);
                sectionInfo.addView(endDate);
                sectionInfo.addView(timeSlot);
                sectionInfo.addView(mentorReq);
                sectionInfo.addView(menteeReq);
                sectionInfo.addView(description);
                sectionInfo.addView(Mentor_Enrole);
                sectionInfo.addView(Mentee_Enrole);
                sectionInfo.addView(moderatorEnrole);
                sectionInfo.addView(CurrentModerator);
                subSectionSet.clone(sectionInfo);

                /*subSectionSet.createHorizontalChain(courseInfo.getId(), ConstraintSet.LEFT,
                        courseInfo.getId(), ConstraintSet.RIGHT,
                        new int[] {sectionName.getId(), SectionID.getId()}, null, ConstraintSet.CHAIN_SPREAD);
                sectionSet.connect(SectionID.getId(), ConstraintSet.BASELINE, sectionName.getId(), ConstraintSet.BASELINE);*/

                subSectionSet.createHorizontalChain(sectionInfo.getId(),ConstraintSet.LEFT,sectionInfo.getId(),ConstraintSet.RIGHT,
                        new int[]{startDate.getId(),endDate.getId()},null,ConstraintSet.CHAIN_SPREAD);
                subSectionSet.connect(startDate.getId(),ConstraintSet.BASELINE,endDate.getId(),ConstraintSet.BASELINE);


                subSectionSet.connect(timeSlot.getId(),ConstraintSet.TOP,startDate.getId(),ConstraintSet.BOTTOM,4);
                subSectionSet.connect(timeSlot.getId(),ConstraintSet.LEFT,sectionInfo.getId(),ConstraintSet.LEFT);
                subSectionSet.connect(timeSlot.getId(),ConstraintSet.RIGHT,sectionInfo.getId(),ConstraintSet.RIGHT);

                subSectionSet.connect(menteeReq.getId(),ConstraintSet.TOP,timeSlot.getId(),ConstraintSet.BOTTOM,4);
                subSectionSet.connect(menteeReq.getId(),ConstraintSet.LEFT,sectionInfo.getId(),ConstraintSet.LEFT);
                subSectionSet.connect(menteeReq.getId(),ConstraintSet.RIGHT,sectionInfo.getId(),ConstraintSet.RIGHT);

                subSectionSet.connect(mentorReq.getId(),ConstraintSet.TOP,menteeReq.getId(),ConstraintSet.BOTTOM,4);
                subSectionSet.connect(mentorReq.getId(),ConstraintSet.LEFT,sectionInfo.getId(),ConstraintSet.LEFT);
                subSectionSet.connect(mentorReq.getId(),ConstraintSet.RIGHT,sectionInfo.getId(),ConstraintSet.RIGHT);

                subSectionSet.connect(description.getId(),ConstraintSet.TOP,mentorReq.getId(),ConstraintSet.BOTTOM,4);
                subSectionSet.connect(description.getId(),ConstraintSet.LEFT,sectionInfo.getId(),ConstraintSet.LEFT);
                subSectionSet.connect(description.getId(),ConstraintSet.RIGHT,sectionInfo.getId(),ConstraintSet.RIGHT);

                subSectionSet.createHorizontalChain(sectionInfo.getId(),ConstraintSet.LEFT,sectionInfo.getId(),ConstraintSet.RIGHT,
                        new int[]{Mentor_Enrole.getId(),Mentee_Enrole.getId()},null,ConstraintSet.CHAIN_SPREAD);
                subSectionSet.connect(Mentee_Enrole.getId(),ConstraintSet.BASELINE,Mentor_Enrole.getId(),ConstraintSet.BASELINE);
                subSectionSet.connect(Mentor_Enrole.getId(),ConstraintSet.TOP,description.getId(),ConstraintSet.BOTTOM,4);
                subSectionSet.connect(Mentee_Enrole.getId(),ConstraintSet.TOP,description.getId(),ConstraintSet.BOTTOM,4);

                subSectionSet.createHorizontalChain(sectionInfo.getId(),ConstraintSet.LEFT,sectionInfo.getId(),ConstraintSet.RIGHT,
                        new int[]{CurrentModerator.getId(),moderatorEnrole.getId()},null,ConstraintSet.CHAIN_SPREAD);
                subSectionSet.connect(CurrentModerator.getId(),ConstraintSet.TOP,Mentor_Enrole.getId(),ConstraintSet.BOTTOM);
                subSectionSet.connect(moderatorEnrole.getId(),ConstraintSet.BASELINE,CurrentModerator.getId(),ConstraintSet.BASELINE);
                subSectionSet.connect(moderatorEnrole.getId(),ConstraintSet.TOP, Mentor_Enrole.getId(),ConstraintSet.BOTTOM);

                /*if(section_index == 0) {
                    //attach to header
                    sectionSet.connect(sectionName.getId(), ConstraintSet.TOP, SectionHeader.getId(), ConstraintSet.BOTTOM, 16);
                    sectionSet.connect(sectionInfo.getId(),ConstraintSet.TOP, sectionName.getId(), ConstraintSet.BOTTOM,4);
                } else {
                    //attach to previous section element
                    sectionSet.connect(sectionName.getId(), ConstraintSet.TOP, (int) sectionInfo.getId() - 1 , ConstraintSet.BOTTOM, 4);
                    sectionSet.connect(sectionInfo.getId(),ConstraintSet.TOP, sectionName.getId(), ConstraintSet.BOTTOM,4);
                }*/
                subSectionSet.applyTo(sectionInfo);
                section_index++;

            }
        }
    }

    public void toggleSectionInfo(View view) {
        int sectionInfoId = view.getId() - IdValues.TITLE + IdValues.CONSTRAINT_LAYOUT;
        ConstraintLayout sectionInfo = findViewById(sectionInfoId);
        Log.d("toggleSectionInfo", "Triggered!");
        TextView textView = (TextView) view;
        if(sectionInfo.isShown()) {
            textView.setCompoundDrawablesWithIntrinsicBounds(android.R.drawable.arrow_down_float, 0, 0, 0);
            sectionInfo.setVisibility(View.GONE);
        } else {
            textView.setCompoundDrawablesWithIntrinsicBounds(android.R.drawable.arrow_up_float, 0, 0, 0);
            sectionInfo.setVisibility(View.VISIBLE);
        }
    }
    public void toggleSubSectionInfo(View view) {
        int sectionInfoId = view.getId() - IdValues.MENTEE_NAME + IdValues.SUBCONSTRAINT_LAYOUT;
        ConstraintLayout sectionInfo = findViewById(sectionInfoId);
        Log.d("toggleSectionInfo", "Triggered!");
        TextView textView = (TextView) view;
        if(sectionInfo.isShown()) {
            textView.setCompoundDrawablesWithIntrinsicBounds(android.R.drawable.arrow_down_float, 0, 0, 0);
            sectionInfo.setVisibility(View.GONE);
        } else {
            textView.setCompoundDrawablesWithIntrinsicBounds(android.R.drawable.arrow_up_float, 0, 0, 0);
            sectionInfo.setVisibility(View.VISIBLE);
        }
    }

}
